{
  "openapi": "3.0.1",
  "info": {
    "title": "Task-Pro API",
    "description": "Tasks managing API\n\n    Base URL: https://task-pro-app.onrender.com/api",
    "version": "1.0.0"
  },
  "produces": ["application/json"],

  "servers": [
    {
      "url": "https://task-pro-app.onrender.com/api",
      "description": "Main (production) server"
    },
    {
      "url": "http://localhost:5000",
      "description": "Internal staging server for testing"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User endpoints"
    },
    {
      "name": "Boards",
      "description": "Boards endpoints"
    },
    {
      "name": "Columns",
      "description": "Columns endpoints"
    },
    {
      "name": "Tasks",
      "description": "Tasks endpoints"
    },
    {
      "name": "Backgrounds",
      "description": "Background endpoints"
    },
    {
      "name": "Mini Background Images",
      "description": "Background endpoints"
    }
  ],

  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "description": "Registration of a new account.\n\n Creates a new account and performes the system login procedure ",
        "parameters": [
          {
            "in": "body",
            "name": "Body",
            "description": "Body description:\n\n    'name'- string, user name or nick - name must be between 8 and 32 characters long\n\n    'email' - string, valid user`s email\n\n    'password' - string, password must be between 8 and 32 characters long",
            "required": true,
            "schema": { "$ref": "#/components/schemas/RegistrationRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "New user is registered\n\n    'name' - string, user name\n\n    'email' - string, user email\n\n    'token' - string, token assigned to the user    \n\n    'theme'- string, default value - 'light'\n\n    'avatarURL'- string, a link to the user's avatar, default value - empty string",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                }
              }
            }
          }
        }
      }
    },

    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Sign in existing user",
        "description": "Log in to the application of an existing user",
        "parameters": [
          {
            "in": "body",
            "name": "Body",
            "description": "Body description:\n\n    'email' - string, valid user`s email\n\n    'password' - string, valid user`s password",
            "required": true,
            "schema": { "$ref": "#/components/schemas/LoginRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "New user is registered\n\n    'name' - string, user name\n\n    'email' - string, user email\n\n    'token' - string, token assigned to the user    \n\n    'theme'- string, default value - 'light'\n\n    'avatarURL'- string, a link to the user's avatar, default value - empty string",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                }
              }
            }
          }
        }
      }
    },

    "/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Sign out existing user",
        "description": "Sign out. The access token issued during the previous authentication is destroyed.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },

    "/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user",
        "description": "Obtaining information about the current authorized user",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful response\n\n    'id' - string, user's id\n\n    'name' - string, user name\n\n    'email' - string, user email\n\n    'avatarURL'- string, a link to the user's avatar\n\n    'theme' - string, user theme\n\n    'currentBoard' - string, id of the last board that the user used",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/currentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },

    "/users/update": {
      "patch": {
        "tags": ["User"],
        "summary": "Update current user",
        "description": "Updates one or more fields in the profile of the currently authorized user",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Body",
            "description": "Body description:\n\n    'name'- string [optional], user name or nick - name must be between 8 and 32 characters long\n\n    'email' - string [optional], valid user`s email\n\n    'password' - string [optional], password must be between 8 and 32 characters long",
            "required": true,
            "schema": { "$ref": "#/components/schemas/RegistrationRequest" }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/currentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },

    "/users/avatar": {
      "patch": {
        "tags": ["User"],
        "summary": "Update avatar",
        "description": "Update current user`s avatar",
        "parameters": [
          {
            "name": "Authorization",
            "in": "eader",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Board object that needs to be updated\n\n     'avatar' - string, format .jpg or .png",
            "required": true,
            "schema": { "$ref": "#/components/schemas/UpdateAvatar" }
          }
        ],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },

    "/board": {
      "get": {
        "tags": ["Boards"],
        "summary": "getAllBoards",
        "description": "Користувач отримує масив всіх дошок або пустий масив, якщо такі відсутні",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\n Опис параметрів відповіді: \n\n     '_id' - string (ObjectId)\n\n     'title' - string\n\n     'iconId' - string\n\n     'backgroundId' - string\n\n     'owner' - string (ObjectId)\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllBoardsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/board/getById/{id}": {
      "get": {
        "tags": ["Boards"],
        "summary": "getBoardByID",
        "description": "Користувач отримує дошку по id",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of board that needs to be fetched\n\n     'id' - string (ObjectId)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\n Опис параметрів відповіді: \n\n     '_id' - string (ObjectId)\n\n     'title' - string\n\n     'iconId' - string\n\n     'backgroundId' - string\n\n     'owner' - string (ObjectId)\n\n        Array of column objects\n\n     '_id' - string (ObjectId)\n\n     'title' - string, optional\n\n     'board' - string (ObjectId)\n\n         Array of task objects\n\n     'title' - string, optional\n\n     'description' - string, optional\n\n     'priority' - string, optional, value from ['low', 'medium', 'high', 'without']\n\n     'deadline' - date, optional\n\n     'board' - string (ObjectId), optional\n\n     'column' - string (ObjectId), optional\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoardByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/board/getCurrent": {
      "get": {
        "tags": ["Boards"],
        "summary": "getCurrent",
        "description": "Користувач отримує останню дошку, з якою працював",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\n Опис параметрів відповіді: \n\n     '_id' - string (ObjectId)\n\n     'title' - string\n\n     'iconId' - string\n\n     'backgroundId' - string\n\n     'owner' - string (ObjectId)\n\n        Array of column objects\n\n     '_id' - string (ObjectId)\n\n     'title' - string, optional\n\n     'board' - string (ObjectId)\n\n         Array of task objects\n\n     'title' - string, optional\n\n     'description' - string, optional\n\n     'priority' - string, optional, value from ['low', 'medium', 'high', 'without']\n\n     'deadline' - date, optional\n\n     'board' - string (ObjectId), optional\n\n     'column' - string (ObjectId), optional\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoardByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/board/create": {
      "post": {
        "tags": ["Boards"],
        "summary": "createBoard",
        "description": "Користувач створює нову робочу дошку",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Body description: \n\n    '_id' - string (ObjectId)\n\n    'title'- string, board title\n\n    'iconId'- string, board icon id\n\n    'backgroundId'- string, board background id",
            "required": true,
            "schema": { "$ref": "#/components/schemas/CreateBoard" }
          }
        ],
        "responses": {
          "201": {
            "description": "Response description:\n\n 'title'- string, board title\n\n 'iconId'- string, board icon id\n\n 'backgroundId'- string, board background id\n\n 'owner'- string, id власника\n\n '_id'- string, id дошки",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBoardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized \n\n Email or password is wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/board/update/{id}": {
      "patch": {
        "tags": ["Boards"],
        "summary": "updateBoard",
        "description": "The user updates one or more fields of the current board",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of board that needs to be updated\n\n     'id' - string (ObjectId)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Board object that needs to be updated \n\n Опис параметрів запиту: \n\n    'title'- string, board title - optional\n\n    'iconId'- string, board icon id - optional\n\n    'backgroundId'- string, board background id - optional",
            "required": true,
            "schema": { "$ref": "#/components/schemas/CreateBoard" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\n Опис параметрів відповіді: \n\n     '_id' - string (ObjectId)\n\n     'title' - string\n\n     'iconId' - string\n\n     'backgroundId' - string\n\n     'owner' - string (ObjectId)\n\n        Array of column objects\n\n     '_id' - string (ObjectId)\n\n     'title' - string, optional\n\n     'board' - string (ObjectId)\n\n         Array of task objects\n\n     'title' - string, optional\n\n     'description' - string, optional\n\n     'priority' - string, optional, value from ['low', 'medium', 'high', 'without']\n\n     'deadline' - date, optional\n\n     'board' - string (ObjectId), optional\n\n     'column' - string (ObjectId), optional\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoardByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/board/delete/{id}": {
      "delete": {
        "tags": ["Boards"],
        "summary": "deleteBoard",
        "description": "Користувач видаляє робочу дошку",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of board that needs to be deleted\n\n     'id' - string (ObjectId)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },

    "/column/{boardId}": {
      "post": {
        "tags": ["Columns"],
        "summary": "create new column",
        "description": "Користувач створює нову колонку",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          },
          {
            "name": "boardId",
            "in": "path",
            "description": "ID of the current board\n\n     'boardId' - string (ObjectId)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Column that needs to be added \n\n     'title' - string, required",
            "required": true,
            "schema": { "$ref": "#/components/schemas/CreateColumn" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created\n\n      '_id' - string (ObjectId)\n\n     'title' - string\n\n     'board' - string (ObjectId)\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateColumnResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          }
        }
      }
    },

    "/column/{id}": {
      "patch": {
        "tags": ["Columns"],
        "summary": "updateColumn",
        "description": "Користувач оновлює колонку",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of column that needs to be updated\n\n     'id' - string (ObjectId)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Column object that needs to be updated \n\n    'title'- string, column title\n\n",
            "required": true,
            "schema": { "$ref": "#/components/schemas/CreateColumn" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\n      '_id' - string (ObjectId)\n\n     'title' - string\n\n     'board' - string (ObjectId)\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateColumnResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          }
        }
      }
    },

    "/column/{id} ": {
      "delete": {
        "tags": ["Columns"],
        "summary": "deleteColumn",
        "description": "Користувач видаляє колонку",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of column that needs to be deleted\n\n     'id' - string (ObjectId)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },

    "/tasks/{id} ": {
      "get": {
        "tags": ["Tasks"],
        "summary": "get task by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of task that needs to be fetched\n\n     'id' - string (ObjectId)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\n Опис параметрів відповіді: \n\n     '_id' - string (ObjectId)\n\n     'title' - string\n\n     'description' - string\n\n     'priority' - string, value from ['Low', 'Medium', 'High', 'Without']\n\n     'deadline' - date\n\n     'board' - string (ObjectId)\n\n     'column' - string (ObjectId)\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{boardId}{columnId}": {
      "post": {
        "tags": ["Tasks"],
        "summary": "create new task",
        "parameters": [
          {
            "name": "boardId",
            "in": "path",
            "description": "ID of the current board\n\n     'boardId' - string (ObjectId)",
            "required": true,
            "type": "string"
          },
          {
            "name": "columnId",
            "in": "path",
            "description": "ID of the current column\n\n     'columnId' - string (ObjectId)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Task object that needs to be added \n\n Опис параметрів запиту: \n\n     'title' - string, required\n\n     'description' - string, required\n\n     'priority' - string, required, value from ['Low', 'Medium', 'High', 'Without']\n\n     'deadline' - date, required\n\n     'board' - string (ObjectId), required\n\n     'column' - string (ObjectId), required\n\n",
            "required": true,
            "schema": { "$ref": "#/components/schemas/PostTaskRequest" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created\n\n Опис параметрів відповіді: \n\n     '_id' - string (ObjectId)\n\n     'title' - string\n\n     'description' - string\n\n     'priority' - string, value from ['Low', 'Medium', 'High', 'Without']\n\n     'deadline' - date\n\n     'board' - string (ObjectId)\n\n     'column' - string (ObjectId)\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "patch": {
        "tags": ["Tasks"],
        "summary": "update task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of task that needs to be updated\n\n     'id' - string (ObjectId)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Task object that needs to be updated \n\n Опис параметрів запиту: \n\n     'title' - string, optional\n\n     'description' - string, optional\n\n     'priority' - string, optional, value from ['Low', 'Medium', 'High', 'Without']\n\n     'deadline' - date, optional\n\n     'board' - string (ObjectId), optional\n\n     'column' - string (ObjectId), optional\n\n",
            "required": true,
            "schema": { "$ref": "#/components/schemas/PatchTaskRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\n Опис параметрів відповіді: \n\n     '_id' - string (ObjectId)\n\n     'title' - string\n\n     'description' - string\n\n     'priority' - string, value from ['Low', 'Medium', 'High', 'Without']\n\n     'deadline' - date\n\n     'board' - string (ObjectId)\n\n     'column' - string (ObjectId)\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}  ": {
      "delete": {
        "tags": ["Tasks"],
        "summary": "delete task",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of task that needs to be deleted\n\n     'id' - string (ObjectId)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundTaskResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{priority}{columnId}": {
      "get": {
        "tags": ["Tasks"],
        "summary": "filtered by 'priority' and 'columnId' property task list",
        "parameters": [
          {
            "name": "priority",
            "in": "path",
            "description": "'priority' - property to be filtered by\n\n     'priority' - string, value from ['Low', 'Medium', 'High', 'Without'] list",
            "required": true,
            "type": "string"
          },
          {
            "name": "columnId",
            "in": "path",
            "description": "'columnId' - property to be filtered by\n\n     'columnId' - string (ObjectId)",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "The token issued to the current user\n\n     'authorization' - Bearer Token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\n Опис параметрів відповіді: \n\n Масив відфільтрованих об'єктів з наступними полями: \n\n     '_id' - string (ObjectId)\n\n     'title' - string\n\n     'description' - string\n\n     'priority' - string, value from ['Low', 'Medium', 'High', 'Without']\n\n     'deadline' - date\n\n     'board' - string (ObjectId)\n\n     'column' - string (ObjectId)\n\n"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/miniImages": {
      "get": {
        "tags": ["Mini Background Images"],
        "summary": "Get all mini images",
        "description": "Fetch all available mini images",
        "responses": {
          "200": {
            "description": "List of mini images",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MiniImageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/miniImages/{id}": {
      "get": {
        "tags": ["Mini Background Images"],
        "summary": "Get mini image by ID",
        "description": "Fetch a specific mini image by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the mini image",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Specific mini image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MiniImageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/background": {
      "get": {
        "tags": ["Backgrounds"],
        "summary": "Get all background images",
        "description": "Fetch all available background images",
        "responses": {
          "200": {
            "description": "List of background images",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/background/{id}": {
      "get": {
        "tags": ["Backgrounds"],
        "summary": "Get background by ID",
        "description": "Fetch a specific background image by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the background image",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Specific background image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorServerResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "User name"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },

      "AuthResponse": {
        "type": "object",
        "required": ["name", "email", "token", "avatarURL", "theme"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "User name"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "6498c7649a32ea75e83dfa35..."
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatarURL",
            "example": "avatarURL.jpg"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "example": "light"
          }
        }
      },

      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },

      "currentResponse": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "id": {
            "type": "string",
            "description": "User's id",
            "example": "6498c7649a32ea75e83dfa35"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "User Name"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's img",
            "format": "URL"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "enum": ["light", "dark", "Violet"],
            "example": "light"
          },
          "currentBoard": {
            "type": "string",
            "description": "User's current board id",
            "example": "6498c7649a32ea75e83dfa35"
          }
        }
      },
      "UpdateAvatar": {
        "type": "object",
        "required": ["avatarimage"],
        "properties": {
          "avatarimage": {
            "type": "string",
            "description": "User's avatarimage",
            "example": "avatarimage.jpg"
          }
        }
      },
      "UpdateAvatarResponse": {
        "type": "object",
        "required": ["avatarimage"],
        "properties": {
          "avatarURL": {
            "type": "string",
            "description": "User's avatarimage URL",
            "example": "http://somecloud.avatarimage.jpg"
          }
        }
      },

      "GetAllBoardsResponse": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board`s id",
            "example": "6498c7649a32ea75e83dfa35"
          },
          "title": {
            "type": "string",
            "description": "Board`s title",
            "example": "Board Title"
          },
          "iconId": {
            "type": "string",
            "description": "Icon ID",
            "example": "1"
          },
          "backgroundId": {
            "type": "string",
            "description": "Background ID",
            "example": "1"
          },
          "owner": {
            "type": "string",
            "description": "Board`s owner",
            "example": "6498c7649a32ea75e83dfa35"
          }
        }
      },

      "GetBoardByIdResponse": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board`s id",
            "example": "6498c7649a32ea75e83dfa35"
          },
          "title": {
            "type": "string",
            "description": "Board`s title",
            "example": "Board Title"
          },
          "iconId": {
            "type": "string",
            "description": "Icon ID",
            "example": "1"
          },
          "backgroundId": {
            "type": "string",
            "description": "Background ID",
            "example": "1"
          },
          "owner": {
            "type": "string",
            "description": "Board`s owner",
            "example": "6498c7649a32ea75e83dfa35"
          },
          "columns": {
            "type": "object",
            "description": "Array of columns",
            "properties": {
              "_id": {
                "type": "string",
                "example": "6498c7649a32ea75e83dfa35"
              },
              "title": {
                "type": "string",
                "example": "Board Title"
              },
              "board": {
                "type": "string",
                "example": "6498c7649a32ea75e83dfa35"
              }
            }
          },
          "tasks": {
            "type": "object",
            "description": "Array of tasks",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Board ID",
                "example": "649716d4000e004dc6510753"
              },
              "title": {
                "type": "string",
                "description": "Task`s title",
                "example": "Task`s title"
              },
              "description": {
                "type": "string",
                "description": "Task`s description",
                "example": "Task`s description"
              },
              "priority": {
                "type": "string",
                "description": "Task`s priority",
                "example": "Medium"
              },
              "deadline": {
                "type": "date",
                "description": "Task`s deadline",
                "example": "2023-12-31T22:00:00.000Z"
              },
              "board": {
                "type": "string",
                "description": "Task board's id",
                "example": "649714c3864b736704fe10e5"
              },
              "column": {
                "type": "string",
                "description": "Task column's id",
                "example": "649713f43e0e7da655c4e650"
              }
            }
          }
        }
      },

      "CreateBoard": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board ID",
            "example": "649716d4000e004dc6510753"
          },
          "title": {
            "type": "string",
            "description": "Board`s title",
            "example": "BoardTitle"
          },
          "iconId": {
            "type": "string",
            "description": "Icon ID",
            "example": "1"
          },
          "backgroundId": {
            "type": "string",
            "description": "Background ID",
            "example": "1"
          }
        }
      },

      "CreateBoardResponse": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board ID",
            "example": "6498c7649a32ea75e83dfa35"
          },
          "title": {
            "type": "string",
            "description": "Board`s title",
            "example": "BoardTitle"
          },
          "iconId": {
            "type": "string",
            "description": "Icon ID",
            "example": "1"
          },
          "backgroundId": {
            "type": "string",
            "description": "Background ID",
            "example": "1"
          },
          "owner": {
            "type": "string",
            "description": "User ID",
            "example": "1"
          }
        }
      },

      "PatchBoardRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Board`s title",
            "example": "BoardTitle - optional"
          },
          "iconId": {
            "type": "string",
            "description": "Icon ID",
            "example": "1 - optional"
          },
          "backgroundId": {
            "type": "string",
            "description": "Background ID",
            "example": "1 - optional"
          }
        }
      },

      "CreateColumn": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Column`s title",
            "example": "Column Title"
          }
        }
      },

      "CreateColumnResponse": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Column ID",
            "example": "6498c7649a32ea75e83dfa35"
          },
          "title": {
            "type": "string",
            "description": "Column`s title",
            "example": "Column Title"
          },
          "board": {
            "type": "string",
            "description": "Column board's id",
            "example": "649714c3864b736704fe10e5"
          }
        }
      },

      "PostTaskRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Task`s title",
            "example": "Task`s title"
          },
          "description": {
            "type": "string",
            "description": "Task`s description",
            "example": "Task`s description"
          },
          "priority": {
            "type": "string",
            "description": "Task`s priority",
            "example": "Medium"
          },
          "deadline": {
            "type": "date",
            "description": "Task`s deadline",
            "example": "2023-12-31T22:00:00.000Z"
          },
          "board": {
            "type": "string",
            "description": "Task board's id",
            "example": "649714c3864b736704fe10e5"
          },
          "column": {
            "type": "string",
            "description": "Task column's id",
            "example": "649713f43e0e7da655c4e650"
          }
        }
      },

      "PatchTaskRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Task`s title",
            "example": "Task`s title - optional"
          },
          "description": {
            "type": "string",
            "description": "Task`s description",
            "example": "Task`s description - optional"
          },
          "priority": {
            "type": "string",
            "description": "Task`s priority",
            "example": "Medium - optional"
          },
          "deadline": {
            "type": "date",
            "description": "Task`s deadline",
            "example": "2023-12-31T22:00:00.000Z - optional"
          },
          "board": {
            "type": "string",
            "description": "Task board's id",
            "example": "649714c3864b736704fe10e5 - optional"
          },
          "column": {
            "type": "string",
            "description": "Task column's id",
            "example": "649713f43e0e7da655c4e650 - optional"
          }
        }
      },

      "GetTaskByIdResponse": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board ID",
            "example": "649716d4000e004dc6510753"
          },
          "title": {
            "type": "string",
            "description": "Task`s title",
            "example": "Task`s title"
          },
          "description": {
            "type": "string",
            "description": "Task`s description",
            "example": "Task`s description"
          },
          "priority": {
            "type": "string",
            "description": "Task`s priority",
            "example": "Medium"
          },
          "deadline": {
            "type": "date",
            "description": "Task`s deadline",
            "example": "2023-12-31T22:00:00.000Z"
          },
          "board": {
            "type": "string",
            "description": "Task board's id",
            "example": "649714c3864b736704fe10e5"
          },
          "column": {
            "type": "string",
            "description": "Task column's id",
            "example": "649713f43e0e7da655c4e650"
          }
        }
      },

      "BackgroundResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the background image",
            "example": "Image-1"
          },
          "desktop": {
            "type": "object",
            "properties": {
              "regular": {
                "type": "string",
                "description": "The regular desktop image URL",
                "example": "https://res.cloudinary.com/dg2fte8tf/image/upload/v1687447979/backgrounds_img/image1_q73vua.jpg"
              },
              "retina": {
                "type": "string",
                "description": "The retina desktop image URL",
                "example": "https://res.cloudinary.com/dg2fte8tf/image/upload/v1687471238/backgrounds-retina_img/dtimg1_nst090.jpg"
              }
            }
          },
          "tablet": {
            "type": "object",
            "properties": {
              "regular": {
                "type": "string",
                "description": "The regular tablet image URL",
                "example": "https://res.cloudinary.com/dg2fte8tf/image/upload/v1687449131/backgrounds_img/image23_bd7fak.jpg"
              },
              "retina": {
                "type": "string",
                "description": "The retina tablet image URL",
                "example": "https://res.cloudinary.com/dg2fte8tf/image/upload/v1687471431/backgrounds-retina_img/tablet-img/diego-ph-wyeapf7Gy-U-unsplash_18_xxaszo.jpg"
              }
            }
          },
          "mobile": {
            "type": "object",
            "properties": {
              "regular": {
                "type": "string",
                "description": "The regular mobile image URL",
                "example": "https://res.cloudinary.com/dg2fte8tf/image/upload/v1687449168/backgrounds_img/image38_ymbpah.jpg"
              },
              "retina": {
                "type": "string",
                "description": "The retina mobile image URL",
                "example": "https://res.cloudinary.com/dg2fte8tf/image/upload/v1687471500/backgrounds-retina_img/mobi-img/diego-ph-wyeapf7Gy-U-unsplash_33_squ45h.jpg"
              }
            }
          }
        },
        "required": ["name", "desktop", "tablet", "mobile"]
      },

      "errorBadRequestResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Bad request"
          }
        }
      },

      "errorUnauthorizedResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": "401"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Unauthorized"
          }
        }
      },

      "errorNotFoundResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": "404"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not found"
          }
        }
      },
      "errorNotFoundTaskResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": "404"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Task with id: 6494787af030656d2939b083 is not found"
          }
        }
      },

      "errorServerResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": "500"
          },
          "message": {
            "type": "string",
            "description": "Server error",
            "example": "Internal Server Error"
          }
        },
        "required": ["error"]
      },

      "errorConflictResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Error status code",
            "example": "409"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Email is already in use"
          }
        }
      },

      "MiniImageResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The auto-generated ID of the mini image",
            "example": "649cad6d73705e8ee6425090"
          },
          "name": {
            "type": "string",
            "description": "The name of the mini image",
            "example": "Image-1"
          },
          "image": {
            "type": "object",
            "properties": {
              "regular": {
                "type": "string",
                "description": "The regular resolution image URL",
                "example": "https://res.cloudinary.com/dg2fte8tf/image/upload/v1687981867/mini-pictures/miniImg-1_icaljf.jpg"
              },
              "retina": {
                "type": "string",
                "description": "The retina resolution image URL",
                "example": "https://res.cloudinary.com/dg2fte8tf/image/upload/v1687981967/mini-pictures-retina/miniImg-ret-1_kpreuq.jpg"
              }
            },
            "description": "The image types (regular, retina)"
          }
        },
        "required": ["_id", "name", "image"]
      }
    },

    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
